/*
 * This file is generated by jOOQ.
*/
package com.sms.sis.db.tables.records;


import com.sms.sis.db.tables.OauthNonce;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthNonceRecord extends UpdatableRecordImpl<OauthNonceRecord> implements Record3<String, String, Long> {

    private static final long serialVersionUID = 2069033237;

    /**
     * Setter for <code>sugarcrm_4_12.oauth_nonce.conskey</code>.
     */
    public void setConskey(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>sugarcrm_4_12.oauth_nonce.conskey</code>.
     */
    public String getConskey() {
        return (String) get(0);
    }

    /**
     * Setter for <code>sugarcrm_4_12.oauth_nonce.nonce</code>.
     */
    public void setNonce(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>sugarcrm_4_12.oauth_nonce.nonce</code>.
     */
    public String getNonce() {
        return (String) get(1);
    }

    /**
     * Setter for <code>sugarcrm_4_12.oauth_nonce.nonce_ts</code>.
     */
    public void setNonceTs(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>sugarcrm_4_12.oauth_nonce.nonce_ts</code>.
     */
    public Long getNonceTs() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record2<String, String> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, String, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return OauthNonce.OAUTH_NONCE.CONSKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return OauthNonce.OAUTH_NONCE.NONCE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field3() {
        return OauthNonce.OAUTH_NONCE.NONCE_TS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getConskey();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getNonce();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value3() {
        return getNonceTs();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthNonceRecord value1(String value) {
        setConskey(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthNonceRecord value2(String value) {
        setNonce(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthNonceRecord value3(Long value) {
        setNonceTs(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthNonceRecord values(String value1, String value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OauthNonceRecord
     */
    public OauthNonceRecord() {
        super(OauthNonce.OAUTH_NONCE);
    }

    /**
     * Create a detached, initialised OauthNonceRecord
     */
    public OauthNonceRecord(String conskey, String nonce, Long nonceTs) {
        super(OauthNonce.OAUTH_NONCE);

        set(0, conskey);
        set(1, nonce);
        set(2, nonceTs);
    }
}
