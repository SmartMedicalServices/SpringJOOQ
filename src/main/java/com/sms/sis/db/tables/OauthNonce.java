/*
 * This file is generated by jOOQ.
*/
package com.sms.sis.db.tables;


import com.sms.sis.db.Keys;
import com.sms.sis.db.Sugarcrm_4_12;
import com.sms.sis.db.tables.records.OauthNonceRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OauthNonce extends TableImpl<OauthNonceRecord> {

    private static final long serialVersionUID = -832660039;

    /**
     * The reference instance of <code>sugarcrm_4_12.oauth_nonce</code>
     */
    public static final OauthNonce OAUTH_NONCE = new OauthNonce();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OauthNonceRecord> getRecordType() {
        return OauthNonceRecord.class;
    }

    /**
     * The column <code>sugarcrm_4_12.oauth_nonce.conskey</code>.
     */
    public final TableField<OauthNonceRecord, String> CONSKEY = createField("conskey", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>sugarcrm_4_12.oauth_nonce.nonce</code>.
     */
    public final TableField<OauthNonceRecord, String> NONCE = createField("nonce", org.jooq.impl.SQLDataType.VARCHAR.length(32).nullable(false), this, "");

    /**
     * The column <code>sugarcrm_4_12.oauth_nonce.nonce_ts</code>.
     */
    public final TableField<OauthNonceRecord, Long> NONCE_TS = createField("nonce_ts", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>sugarcrm_4_12.oauth_nonce</code> table reference
     */
    public OauthNonce() {
        this("oauth_nonce", null);
    }

    /**
     * Create an aliased <code>sugarcrm_4_12.oauth_nonce</code> table reference
     */
    public OauthNonce(String alias) {
        this(alias, OAUTH_NONCE);
    }

    private OauthNonce(String alias, Table<OauthNonceRecord> aliased) {
        this(alias, aliased, null);
    }

    private OauthNonce(String alias, Table<OauthNonceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sugarcrm_4_12.SUGARCRM_4_12;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OauthNonceRecord> getPrimaryKey() {
        return Keys.KEY_OAUTH_NONCE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OauthNonceRecord>> getKeys() {
        return Arrays.<UniqueKey<OauthNonceRecord>>asList(Keys.KEY_OAUTH_NONCE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OauthNonce as(String alias) {
        return new OauthNonce(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OauthNonce rename(String name) {
        return new OauthNonce(name, null);
    }
}
